name: Docker Build & Push

on:
  push:
    tags:
      - 'v*'   # Only trigger for version tags like v1.0.0, v2.1.3
  workflow_dispatch:

jobs:
  docker:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      # --------------------------
      # Checkout repo
      # --------------------------
      - name: Checkout
        uses: actions/checkout@v5

      # --------------------------
      # Setup QEMU (for multi-arch)
      # --------------------------
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # --------------------------
      # Setup Buildx (for caching)
      # --------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --------------------------
      # Docker Hub Login
      # --------------------------
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # --------------------------
      # Extract Docker metadata
      # --------------------------
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            rxcod9/php-swoole-crud-microservice
          tags: |
            # Full semver tag from Git tag (v1.2.3)
            type=semver,pattern={{version}}
            # Major version only (v1)
            type=semver,pattern={{major}}
            # Major.minor version (v1.2)
            type=semver,pattern={{major}}.{{minor}}
            # Stable alias for major version (maps to v1.x.x)
            type=semver,pattern=stable,enable={{is_default_branch}}
            # Always tag latest (for newest release)
            latest

      # --------------------------
      # Build Debian-based image (uses cache scope 'debian')
      # --------------------------
      - name: Build Debian image (multi-arch) - build only
        id: build_debian
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          cache-from: type=gha,scope=debian
          cache-to: type=gha,scope=debian,mode=max
          outputs: type=local,dest=./dist/debian  # optional local export for inspection

      # --------------------------
      # Sanity test Debian image (run a container from the built image)
      # Note: we use the built local result to run tests; this pattern avoids pushing a broken image.
      # --------------------------
      - name: Sanity test Debian build
        if: always()
        run: |
          # load local image tar if outputs were generated; fallback: build a temp image
          echo "Sanity testing Debian image build artifacts"
          # Build a temporary tag (using the Dockerfile) and run checks to validate extensions
          docker buildx build --load --file ./Dockerfile --tag rxcod9/php-swoole-crud-microservice:debian-test .
          docker run --rm rxcod9/php-swoole-crud-microservice:debian-test php -v
          docker run --rm rxcod9/php-swoole-crud-microservice:debian-test php -m | grep -E 'swoole|redis|pdo_mysql|pdo_sqlite' || (echo "Required extensions missing" && exit 1)

      # --------------------------
      # Push Debian image (only if tests pass)
      # --------------------------
      - name: Push Debian image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          cache-from: type=gha,scope=debian
          cache-to: type=gha,scope=debian,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # --------------------------
      # Build Alpine-based image (uses cache scope 'alpine')
      # --------------------------
      - name: Build Alpine image (multi-arch) - build only
        id: build_alpine
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.alpine
          push: false
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          cache-from: type=gha,scope=alpine
          cache-to: type=gha,scope=alpine,mode=max
          outputs: type=local,dest=./dist/alpine

      # --------------------------
      # Sanity test Alpine image
      # --------------------------
      - name: Sanity test Alpine build
        if: always()
        run: |
          echo "Sanity testing Alpine image build artifacts"
          docker buildx build --load --file ./Dockerfile.alpine --tag rxcod9/php-swoole-crud-microservice:alpine-test .
          docker run --rm rxcod9/php-swoole-crud-microservice:alpine-test php -v
          docker run --rm rxcod9/php-swoole-crud-microservice:alpine-test php -m | grep -E 'swoole|redis|pdo_mysql|pdo_sqlite' || (echo "Required extensions missing" && exit 1)

      # --------------------------
      # Push Alpine image (only if tests pass)
      # --------------------------
      - name: Push Alpine image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.alpine
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          cache-from: type=gha,scope=alpine
          cache-to: type=gha,scope=alpine,mode=max
          tags: |
            rxcod9/php-swoole-crud-microservice:alpine-${{ steps.meta.outputs.version }}
            rxcod9/php-swoole-crud-microservice:alpine-latest
          labels: ${{ steps.meta.outputs.labels }}

      # --------------------------
      # Show resulting image tags (debugging)
      # --------------------------
      - name: Show image tags
        run: |
          echo "Standard image tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo ""
          echo "Alpine image tags:"
          echo "rxcod9/php-swoole-crud-microservice:alpine-${{ steps.meta.outputs.version }}"
          echo "rxcod9/php-swoole-crud-microservice:alpine-latest"
