# docker-compose.yml
# Docker Compose configuration for PHP Swoole CRUD Microservice stack
# Includes: app, metrics, MySQL, Prometheus, Grafana, Redis, Caddy, Swagger UI

services:
  # Main PHP Swoole application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: php-swoole-crud-microservice:latest
    volumes:
      - .:/app
      - ./docker/php/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
      - ./docker/certs/server.crt:/etc/ssl/certs/server.crt:ro
      - ./docker/certs/server.key:/etc/ssl/private/server.key:ro
    environment:
      APP_ENV: prod                       # Application environment
      DB_DRIVER: mysql                    # Database driver
      DB_DSN: mysql:host=mysql;dbname=app;charset=utf8mb4  # DSN for MySQL
      DB_USER: app                        # Database user
      DB_PASS: app                        # Database password
      DB_POOL_MIN: 5                      # Min DB pool size
      DB_POOL_MAX: 200                    # Max DB pool size
      REDIS_HOST: redis                   # Redis host
      REDIS_PORT: 6379                    # Redis port
      REDIS_POOL_MIN: 5                   # Min Redis pool size
      REDIS_POOL_MAX: 200                 # Max Redis pool size
      SWOOLE_WORKER_NUM: 4                # Swoole worker processes
      SWOOLE_TASK_WORKER_NUM: 4           # Swoole task worker processes
      SWOOLE_MAX_REQUEST: 10000           # Max requests per worker
      SSL_ENABLE: false
      XDEBUG_MODE: debug                  # Xdebug mode
      XDEBUG_CONFIG: client_host=host.docker.internal client_port=9003 # Xdebug config
    ports:
      - "9501:9501"                       # Expose Swoole HTTP port
    depends_on: [mysql, redis]            # Wait for MySQL and Redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9501/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Metrics server for Prometheus scraping
  metrics:
    build: .
    command: php public/metrics-server.php
    ports:
      - "9310:9310"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9310"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on: [app]

  # MySQL database service
  mysql:
    image: mysql:8.4
    environment:
      MYSQL_DATABASE: app
      MYSQL_USER: app
      MYSQL_PASSWORD: app
      MYSQL_ROOT_PASSWORD: root
    ports: ["3306:3306"]
    volumes:
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    healthcheck:
      test: ["CMD","mysqladmin","ping","-h","localhost","-uapp","-papp"]
      interval: 5s
      timeout: 2s
      retries: 20

  # MySQL exporter for Prometheus
  mysqld-exporter:
    image: prom/mysqld-exporter:latest
    container_name: mysqld_exporter
    environment:
      DATA_SOURCE_NAME: "root:root@(mysql:3306)/"
    volumes:
      - ./docker/mysql/.my.cnf:/etc/mysql/.my.cnf:ro
    command:
      - '--config.my-cnf=/etc/mysql/.my.cnf'
    ports:
      - "9104:9104"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9104/metrics"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - mysql

  # Prometheus monitoring service
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on: [mysqld-exporter, metrics, app]

  # Grafana dashboard service
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    # environment:
    #   - GF_SECURITY_ADMIN_USER=admin
    #   - GF_SECURITY_ADMIN_PASSWORD=admin
    # volumes:
    #   - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on: [prometheus]

  # Redis in-memory data store
  redis:
    image: redis:7
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 20

  # Caddy web server and reverse proxy
  caddy:
    image: caddy:2.8
    ports: 
      - "443:443"
      - "80:80"
      - "443:443/udp"   # <- needed for QUIC / HTTP3
    volumes:
      - ./docker/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on: [app]
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "https://localhost/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Swagger UI for API documentation
  swagger-ui:
    image: swaggerapi/swagger-ui:latest
    container_name: swagger_ui
    environment:
      SWAGGER_JSON: /app/swagger.json
    volumes:
      - ./public/swagger.json:/app/swagger.json:ro
    ports:
      - "8080:8080"
    depends_on: [app]

volumes:
  caddy_data:
  caddy_config:
