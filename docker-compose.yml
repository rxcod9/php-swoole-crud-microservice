# docker-compose.yml
# Docker Compose configuration for PHP Swoole CRUD Microservice stack
# Includes: app, metrics, MySQL, Prometheus, Grafana, Redis, Caddy, Swagger UI
# version: "3.9"

services:
  # Main PHP Swoole application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: php-swoole-crud-microservice:v1.0.24
    volumes:
      - .:/app
      - ./docker/php/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - ./docker/certs/server.crt:/etc/ssl/certs/server.crt:ro
      - ./docker/certs/server.key:/etc/ssl/private/server.key:ro
    environment:
      XDEBUG_MODE: ${XDEBUG_MODE:-debug}             # Xdebug mode
      XDEBUG_CONFIG: ${XDEBUG_CONFIG:-client_host=host.docker.internal client_port=9003} # Xdebug config
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "9501:9501"                       # Expose Swoole HTTP port
    depends_on:                           # Wait for MySQL and Redis
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9501/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Metrics server for Prometheus scraping
  metrics:
    build: .
    command: php public/metrics-server.php
    volumes:
      - .:/app
    ports:
      - "${METRICS_PORT:-9310}:${METRICS_PORT:-9310}"
    depends_on:                           # Wait for App
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${METRICS_PORT:-9310}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MySQL database service
  mysql:
    image: mysql:9.5
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASS}
      MYSQL_EXPORTER_USER: ${MYSQL_EXPORTER_USER}
      MYSQL_EXPORTER_PASS: ${MYSQL_EXPORTER_PASS}
    ports: ["3306:3306"]
    volumes:
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./migrations:/docker-entrypoint-initdb.d:ro
      - mysql-data:/var/lib/mysql
      - mysql-logs:/var/log/mysql
    healthcheck:
      test: ["CMD","mysqladmin","ping","-h","localhost","-u${DB_USER}","-p${DB_PASS}"]
      interval: 5s
      timeout: 2s
      retries: 20

  # MySQL exporter for Prometheus
  mysqld-exporter:
    build:
      context: ./docker/mysql-exporter
      dockerfile: Dockerfile
    # image: prom/mysqld-exporter:v0.17.2
    container_name: mysqld_exporter
    environment:
      MYSQL_EXPORTER_USER: ${MYSQL_EXPORTER_USER}
      MYSQL_EXPORTER_PASS: ${MYSQL_EXPORTER_PASS}
      MYSQL_EXPORTER_HOST: ${MYSQL_EXPORTER_HOST}
    ports:
      - "9104:9104"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9104/metrics"]
      interval: 30s
      timeout: 10s
      retries: 5


  # Redis exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:v1.62.0
    container_name: redis_exporter
    environment:
      # Connect to Redis instance (with password)
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "9121:9121"

  # Prometheus monitoring service
  prometheus:
    image: prom/prometheus:v2.55.1
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Grafana dashboard service
  grafana:
    image: grafana/grafana:11.2.2
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-secret}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP:-false}
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      # - grafana-data:/var/lib/grafana   # persist dashboards, users, settings
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis in-memory data store
  redis:
    image: redis:8
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]  # ðŸ‘ˆ Enable AUTH
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 2s
      retries: 20

  # Caddy web server and reverse proxy
  caddy:
    image: caddy:2.10
    ports: 
      - "443:443"
      - "80:80"
      - "443:443/udp"   # <- needed for QUIC / HTTP3
    volumes:
      - ./docker/Caddyfile:/etc/caddy/Caddyfile:ro
      # - caddy_data:
      # - caddy_config:
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "https://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Swagger UI for API documentation
  swagger-ui:
    image: swaggerapi/swagger-ui:v5.17.14
    container_name: swagger_ui
    environment:
      SWAGGER_JSON: ${SWAGGER_JSON_PATH:-/app/swagger.json}
    volumes:
      - ./public/swagger.json:/app/swagger.json:ro
    ports:
      - "8080:8080"

volumes:
  grafana-data:
  mysql-data:
  mysql-logs:
#   # caddy_data:
#   # caddy_config:
